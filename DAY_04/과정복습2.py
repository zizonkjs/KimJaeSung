# 딕셔너리 사용하기 캐릭터 능력치
lux = [490, 334, 550, 18.72]
lux = {'health' : 490, 'mana' : 334, 'melee': 500, 'armor': 18.72}
# 키가 중복되면 가장 뒤에 있는 값만 사용함.

#딕셔너리 키의 자료형
#딕셔너리의 키는 정수,실수 ,불 사용가능. 자료형을 섞어줘도됨.
# 값에는 list, dict, 모든 자료형 사용가능.
x = {100:'hundred', False:0, 3.5:[3.5,3.5]}

# 빈딕셔너리 만들기
v={} 
y=dict()

#dict로 딕셔너리 만들기
lux1= dict(health=490, mana=334, melee=550, armor=18.72)

lux2=dict(zip(['health', 'mana', 'melee', 'armor'], [490,334,550,18.72]))
 # zip 함수로 키 리스트와 값 리스트를 묶음

lux3= dict([('health', 490), ('mana', 334), ('melee', 550), ('armor', 18.72)]) 
# (키, 값) 형식의 tuple을 사용한 dict()

lux4=dict({'health':490, 'mana':334, 'melee':500, 'armor':18.72})
# dict 안에서 {로 딕셔너리를 만듬.}

# 딕셔너리의 키에 접근하고 값 할당하기
#딕셔너리[키]
lux = {'health' : 490, 'mana' : 334, 'melee': 500, 'armor': 18.72}
lux['health']
lux['armor']

#딕셔너리의 키에 값 할당하기
# 딕셔너리[키]=값
lux['health'] = 2039
lux['mana'] = 1184

# 키랑 값 추가하기
lux['mana_regen'] = 3.28
print(lux)

#딕셔너리에 키가 있는지 확인하기
# member연산자 사용
print('health' in lux)
print('attack_speed' in lux)
print('health' not in lux)
print('attack_speed' not in lux)

# 딕셔너리의 키 개수 구하기
len(lux)

# 연습 문제
# 다음 소스 코드를 완성하여 게임 캐릭터의 체력과 속도가 출력되게 만드세요.
lol=dict(health=576.6, health_regen=1.7, mana=338.8, manaregen=2.5, melee=100, atm=60, ats=0.625, armor=125, speed=340)
print(lol['health'])
print(lol['speed'])

#심사문제
# 표준 입력으로 문자열 여러 개와 숫자 여러개가 두 줄로 입력. 첫째줄은 키, 둘째줄은 값 딕셔너리를 생성시키세요.
# input().split() 변수한개에 저장하면 리스트로 저장
keys=input("값을 입력 : ").split()
val=input("vlaue 값 입력 : ").split()
val=list(map(float, val)) # val 값을 float으로 형변환
keysval=dict(zip(keys, val))
print(keysval)

# 핵심정리
# bool Ture, False로 저장
# 비교 연산자
# ==(같음), !=(같지않음), >(초과), <(미만), >=(이상), <=(이하), is (객체비교 같음), is not (객체비교 다름)

# 논리 연산자
# and (양쪽 모두 참일때 참, 하나라도 틀리면 거짓)
# or (양쪽 중 하나라도 참일때 참, 둘다 거짓이면 거짓)
# not(논리 값을 반대로 출력.)

#문자열
# '', "" 사용
#여러줄 일땐 '''내용'''

#list
# 변수명=[값,값2,값3], 변수명=[], 변수명=list(), 변수명=list(range(1,10,2))
# 변수명[인덱스번호], 변수명=변수명[인덱스번호] 

#range
# range(10) -> 0부터 10까지
# rnage(시작,끝)
# range(시작,끝,증가폭)

#튜플
#변수명 = (1,2,3), 변수명 = 1,2,3
#변수명=(), 변수명=tuple(), 변수명=tuple(list())
#변수명=tuple([1,2,3]), 변수명=tuple(range(10,20,2))

#튜플 요소에 접근
# 튜플[인덱스]
# 튜플[0],튜플[1]

# 한개인 튜플만들기
# 튜플=(값,), 튜플 = 값,

#시퀀스 자료형
# 파이썬에서 list, tuple, range, str  과 같이 값이 연속적으로 이어진 자료형을 시퀀스 자료형
# 시퀀스 자료형으로 만든 객체를 시퀀스 객체, 각 들어 있는 값을 요소라고 부른다.

# 시퀀스 자료형의 공통 기능
# 파이썬의 시퀀스 자료형은 공통된 동작과 기능을 제공. list, tuple, rnage, str은 같은 문법을 사용
# member(in, not in) 변수명=시퀀스객체
# 변수명+변수명
# 변수명*정수
# 정수*변수명
# len(변수명)
#변수명[인덱스번호]
#변수명[0]
#변수명[-음수]
#변수명[인덱스]=값
# del 변수명[인덱스번호]

#시퀀스 자료형의 슬라이스, 변수명=시퀀스객체
#시퀀스 자료형은 시퀀스 객체의 일부를 잘라내서 가져오는 slice.()사용 가능
#[]안에 시작 인덱스번호와 끝 인덱스번호를 지정해 새로운 시퀀스 객체를 만듬
#변수명[시작인덱스번호:끝인덱스번호]
#변수명[시작인덱스번호:끝인덱스번호:인덱스증가폭] -> 인덱스증가폭은 인덱스 번호 증가폭임.

#변수명[:끝인덱스], 변수명[시작인덱스:], 변수명[:]

#변수명[0:len(변수명)] -> 객체전체가져오기
#변수명[:len(변수명)]

#변수명[:끝인덱스번호:증가폭번호]
#변수명[시작인덱스::증가폭번호] 시작인덱스부터 증가폭만큼 인덱스를 증가시키면서 마지막 요소까지 가져옴.

#변수명[::증가폭번호]

# 변수명 [:::] 객체 전체를 가져오기

# 변수명[시작인덱스번호:끝인덱스번호] = 시퀀스객체(변수명) #범위를 지정해서 여러 요소에 값 할당
# 변수명[시작인덱스:끝인덱스:인덱스증가폭] = 시퀀스객체(변수명) -> 증가폭만큼 인덱스를 건너뛰면서 할당

# del 변수명[시작:끝] # 범위안에 인덱스 삭제

#딕셔너리
#변수명={키:값, 키2:값2, 키3:값3}
#변수명={}
#변수명=dict()

#변수명[키2] -> 지정된 키에 접근
#변수명[키2]= 값 -> 지정된 키에 값을 할당

#키3 in 변수명 -> 특정키 있는지 확인
#키2 not in 변수명 -> 없는지 확인

#len(딕셔너리변수명)




